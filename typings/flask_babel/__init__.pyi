"""
This type stub file was generated by pyright.
"""

import os
from dataclasses import dataclass
from types import SimpleNamespace
from datetime import datetime
from contextlib import contextmanager
from typing import Callable, List, Optional, Union
from babel.support import NullTranslations, Translations
from flask import current_app, g
from babel import Locale, dates, numbers, support
from pytz import UTC, timezone
from werkzeug.datastructures import ImmutableDict
from werkzeug.utils import cached_property
from flask_babel.speaklater import LazyString

"""
    flask_babel
    ~~~~~~~~~~~

    Implements i18n/l10n support for Flask applications based on Babel.

    :copyright: (c) 2013 by Armin Ronacher, Daniel Neuhäuser.
    :license: BSD, see LICENSE for more details.
"""
@dataclass
class BabelConfiguration:
    """Application-specific configuration for Babel."""
    default_locale: str
    default_timezone: str
    default_domain: str
    default_directories: List[str]
    translation_directories: List[str]
    instance: Babel
    locale_selector: Optional[Callable] = ...
    timezone_selector: Optional[Callable] = ...


def get_babel(app=...) -> BabelConfiguration:
    ...

class Babel:
    """Central controller class that can be used to configure how
    Flask-Babel behaves.  Each application that wants to use Flask-Babel
    has to create, or run :meth:`init_app` on, an instance of this class
    after the configuration was initialized.
    """
    default_date_formats = ...
    def __init__(self, app=..., date_formats=..., configure_jinja=..., *args, **kwargs) -> None:
        """Creates a new Babel instance.

        If an application is passed, it will be configured with the provided
        arguments. Otherwise, :meth:`init_app` can be used to configure the
        application later.
        """
        ...
    
    def init_app(self, app, default_locale=..., default_domain=..., default_translation_directories=..., default_timezone=..., locale_selector=..., timezone_selector=...): # -> None:
        """
        Initializes the Babel instance for use with this specific application.

        :param app: The application to configure
        :param default_locale: The default locale to use for this application
        :param default_domain: The default domain to use for this application
        :param default_translation_directories: The default translation
                                                directories to use for this
                                                application
        :param default_timezone: The default timezone to use for this
                                 application
        :param locale_selector: The function to use to select the locale
                                for a request
        :param timezone_selector: The function to use to select the
                                  timezone for a request
        """
        ...
    
    def list_translations(self): # -> list[Any]:
        """Returns a list of all the locales translations exist for. The list
        returned will be filled with actual locale objects and not just strings.

        .. note::

            The default locale will always be returned, even if no translation
            files exist for it.

        .. versionadded:: 0.6
        """
        ...
    
    @property
    def default_locale(self) -> Locale:
        """The default locale from the configuration as an instance of a
        `babel.Locale` object.
        """
        ...
    
    @property
    def default_timezone(self) -> timezone:
        """The default timezone from the configuration as an instance of a
        `pytz.timezone` object.
        """
        ...
    
    @property
    def domain(self) -> str:
        """The message domain for the translations as a string.
        """
        ...
    
    @cached_property
    def domain_instance(self): # -> Domain:
        """The message domain for the translations.
        """
        ...
    


def get_translations() -> Union[Translations, NullTranslations]:
    """Returns the correct gettext translations that should be used for
    this request.  This will never fail and return a dummy translation
    object if used outside the request or if a translation cannot be found.
    """
    ...

def get_locale() -> Optional[Locale]:
    """Returns the locale that should be used for this request as
    `babel.Locale` object.  This returns `None` if used outside a request.
    """
    ...

def get_timezone() -> Optional[timezone]:
    """Returns the timezone that should be used for this request as
    a `pytz.timezone` object.  This returns `None` if used outside a request.
    """
    ...

def refresh(): # -> None:
    """Refreshes the cached timezones and locale information.  This can
    be used to switch a translation between a request and if you want
    the changes to take place immediately, not just with the next request::

        user.timezone = request.form['timezone']
        user.locale = request.form['locale']
        refresh()
        flash(gettext('Language was changed'))

    Without that refresh, the :func:`~flask.flash` function would probably
    return English text and a now German page.
    """
    ...

@contextmanager
def force_locale(locale): # -> Generator[None, Any, None]:
    """Temporarily overrides the currently selected locale.

    Sometimes it is useful to switch the current locale to different one, do
    some tasks and then revert back to the original one. For example, if the
    user uses German on the website, but you want to email them in English,
    you can use this function as a context manager::

        with force_locale('en_US'):
            send_email(gettext('Hello!'), ...)

    :param locale: The locale to temporary switch to (ex: 'en_US').
    """
    ...

def to_user_timezone(datetime):
    """Convert a datetime object to the user's timezone.  This automatically
    happens on all date formatting unless rebasing is disabled.  If you need
    to convert a :class:`datetime.datetime` object at any time to the user's
    timezone (as returned by :func:`get_timezone`) this function can be used.
    """
    ...

def to_utc(datetime):
    """Convert a datetime object to UTC and drop tzinfo.  This is the
    opposite operation to :func:`to_user_timezone`.
    """
    ...

def format_datetime(datetime=..., format=..., rebase=...): # -> str:
    """Return a date formatted according to the given pattern.  If no
    :class:`~datetime.datetime` object is passed, the current time is
    assumed.  By default, rebasing happens, which causes the object to
    be converted to the user's timezone (as returned by
    :func:`to_user_timezone`).  This function formats both date and
    time.

    The format parameter can either be ``'short'``, ``'medium'``,
    ``'long'`` or ``'full'`` (in which case the language's default for
    that setting is used, or the default from the :attr:`Babel.date_formats`
    mapping is used) or a format string as documented by Babel.

    This function is also available in the template context as filter
    named `datetimeformat`.
    """
    ...

def format_date(date=..., format=..., rebase=...): # -> str:
    """Return a date formatted according to the given pattern.  If no
    :class:`~datetime.datetime` or :class:`~datetime.date` object is passed,
    the current time is assumed.  By default, rebasing happens, which causes
    the object to be converted to the users's timezone (as returned by
    :func:`to_user_timezone`).  This function only formats the date part
    of a :class:`~datetime.datetime` object.

    The format parameter can either be ``'short'``, ``'medium'``,
    ``'long'`` or ``'full'`` (in which case the language's default for
    that setting is used, or the default from the :attr:`Babel.date_formats`
    mapping is used) or a format string as documented by Babel.

    This function is also available in the template context as filter
    named `dateformat`.
    """
    ...

def format_time(time=..., format=..., rebase=...): # -> str:
    """Return a time formatted according to the given pattern.  If no
    :class:`~datetime.datetime` object is passed, the current time is
    assumed.  By default, rebasing happens, which causes the object to
    be converted to the user's timezone (as returned by
    :func:`to_user_timezone`).  This function formats both date and time.

    The format parameter can either be ``'short'``, ``'medium'``,
    ``'long'`` or ``'full'`` (in which case the language's default for
    that setting is used, or the default from the :attr:`Babel.date_formats`
    mapping is used) or a format string as documented by Babel.

    This function is also available in the template context as filter
    named `timeformat`.
    """
    ...

def format_timedelta(datetime_or_timedelta, granularity: str = ..., add_direction=..., threshold=...): # -> str:
    """Format the elapsed time from the given date to now or the given
    timedelta.

    This function is also available in the template context as filter
    named `timedeltaformat`.
    """
    ...

def format_number(number) -> str:
    """Return the given number formatted for the locale in request

    :param number: the number to format
    :return: the formatted number
    :rtype: unicode
    """
    ...

def format_decimal(number, format=...) -> str:
    """Return the given decimal number formatted for the locale in the request.

    :param number: the number to format
    :param format: the format to use
    :return: the formatted number
    :rtype: unicode
    """
    ...

def format_currency(number, currency, format=..., currency_digits=..., format_type=...) -> str:
    """Return the given number formatted for the locale in the request.

    :param number: the number to format
    :param currency: the currency code
    :param format: the format to use
    :param currency_digits: use the currency’s number of decimal digits
                            [default: True]
    :param format_type: the currency format type to use
                        [default: standard]
    :return: the formatted number
    :rtype: unicode
    """
    ...

def format_percent(number, format=...) -> str:
    """Return formatted percent value for the locale in the request.

    :param number: the number to format
    :param format: the format to use
    :return: the formatted percent number
    :rtype: unicode
    """
    ...

def format_scientific(number, format=...) -> str:
    """Return value formatted in scientific notation for the locale in request

    :param number: the number to format
    :param format: the format to use
    :return: the formatted percent number
    :rtype: unicode
    """
    ...

class Domain:
    """Localization domain. By default, it will look for translations in the
    Flask application directory and "messages" domain - all message catalogs
    should be called ``messages.mo``.
    
    Additional domains are supported passing a list of domain names to the
    ``domain`` argument, but note that in this case they must match a list
    passed to ``translation_directories``, eg::

        Domain(
            translation_directories=[
                "/path/to/translations/with/messages/domain",
                "/another/path/to/translations/with/another/domain",
            ],
            domains=[
                "messages",
                "myapp",
            ]
        )
    """
    def __init__(self, translation_directories=..., domain=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def translation_directories(self): # -> list[str]:
        ...
    
    def as_default(self): # -> None:
        """Set this domain as default for the current request"""
        ...
    
    def get_translations_cache(self, ctx): # -> dict[Any, Any]:
        """Returns dictionary-like object for translation caching"""
        ...
    
    def get_translations(self): # -> NullTranslations | Translations:
        ...
    
    def gettext(self, string, **variables): # -> str:
        """Translates a string with the current locale and passes in the
        given keyword arguments as mapping to a string formatting string.

        ::

            gettext(u'Hello World!')
            gettext(u'Hello %(name)s!', name='World')
        """
        ...
    
    def ngettext(self, singular, plural, num, **variables): # -> str:
        """Translates a string with the current locale and passes in the
        given keyword arguments as mapping to a string formatting string.
        The `num` parameter is used to dispatch between singular and various
        plural forms of the message.  It is available in the format string
        as ``%(num)d`` or ``%(num)s``.  The source language should be
        English or a similar language which only has one plural form.

        ::

            ngettext(u'%(num)d Apple', u'%(num)d Apples', num=len(apples))
        """
        ...
    
    def pgettext(self, context, string, **variables): # -> str:
        """Like :func:`gettext` but with a context.

        .. versionadded:: 0.7
        """
        ...
    
    def npgettext(self, context, singular, plural, num, **variables): # -> str:
        """Like :func:`ngettext` but with a context.

        .. versionadded:: 0.7
        """
        ...
    
    def lazy_gettext(self, string, **variables): # -> LazyString:
        """Like :func:`gettext` but the string returned is lazy which means
        it will be translated when it is used as an actual string.

        Example::

            hello = lazy_gettext(u'Hello World')

            @app.route('/')
            def index():
                return unicode(hello)
        """
        ...
    
    def lazy_ngettext(self, singular, plural, num, **variables): # -> LazyString:
        """Like :func:`ngettext` but the string returned is lazy which means
        it will be translated when it is used as an actual string.

        Example::

            apples = lazy_ngettext(
                u'%(num)d Apple',
                u'%(num)d Apples',
                num=len(apples)
            )

            @app.route('/')
            def index():
                return unicode(apples)
        """
        ...
    
    def lazy_pgettext(self, context, string, **variables): # -> LazyString:
        """Like :func:`pgettext` but the string returned is lazy which means
        it will be translated when it is used as an actual string.

        .. versionadded:: 0.7
        """
        ...
    


def get_domain() -> Domain:
    ...

def gettext(*args, **kwargs) -> str:
    ...

_ = ...
def ngettext(*args, **kwargs) -> str:
    ...

def pgettext(*args, **kwargs) -> str:
    ...

def npgettext(*args, **kwargs) -> str:
    ...

def lazy_gettext(*args, **kwargs) -> LazyString:
    ...

def lazy_pgettext(*args, **kwargs) -> LazyString:
    ...

def lazy_ngettext(*args, **kwargs) -> LazyString:
    ...

def lazy_npgettext(*args, **kwargs) -> LazyString:
    ...

